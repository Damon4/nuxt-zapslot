generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id
  name          String
  email         String      @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  isAdmin       Boolean     @default(false)
  accounts      Account[]
  bookings      Booking[]
  contractor    Contractor?
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model DataMigration {
  id          String   @id
  name        String
  executed_at DateTime

  @@map("_data_migrations")
}

model Contractor {
  id                     Int                      @id @default(autoincrement())
  userId                 String                   @unique
  status                 Int                      @default(1)
  description            String
  categories             String
  experience             String?
  portfolio              String?
  price                  String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  appliedAt              DateTime                 @default(now())
  approvedAt             DateTime                 @default(now())
  availability           String?
  phone                  String?
  priceRange             String?
  serviceArea            String?
  socialLinks            String?
  website                String?
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contractorAvailability ContractorAvailability[]
  services               Service[]
  timeSlots              TimeSlot[]

  @@map("contractor")
}

model ContractorCategory {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)

  @@map("contractor_category")
}

model Service {
  id           Int        @id @default(autoincrement())
  contractorId Int
  title        String
  description  String
  category     String
  price        Decimal?
  priceType    String     @default("FIXED")
  duration     Int?
  availability String     @default("FLEXIBLE")
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bookings     Booking[]
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@map("service")
}

model Booking {
  id          Int      @id @default(autoincrement())
  serviceId   Int
  clientId    String
  status      String   @default("PENDING")
  scheduledAt DateTime
  duration    Int?
  totalPrice  Decimal?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  client      User     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("booking")
}

model ContractorAvailability {
  id           Int        @id @default(autoincrement())
  contractorId Int
  dayOfWeek    Int
  startTime    String
  endTime      String
  isAvailable  Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@unique([contractorId, dayOfWeek])
  @@map("contractor_availability")
}

model TimeSlot {
  id           Int        @id @default(autoincrement())
  contractorId Int
  date         DateTime   @db.Date
  startTime    String
  endTime      String
  isBlocked    Boolean    @default(false)
  reason       String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@unique([contractorId, date, startTime])
  @@map("time_slot")
}
